# @package _global_

defaults:
  - override /algo: dreamer_v3_np
  - override /env: atari
  - override /fabric: fabric_np
  - _self_

# Experiment
algo:
  total_steps: 5000000
  per_rank_batch_size: 16
  per_rank_sequence_length: 64
  # Encoder and decoder keys
  cnn_keys:
    encoder: [rgb]
    decoder: ${algo.cnn_keys.encoder}
  mlp_keys:
    encoder: []
    decoder: ${algo.mlp_keys.encoder}

# Checkpoint
checkpoint:
  every: 100000

# Buffer
buffer:
  size: 1000000
  checkpoint: False

# Distribution
distribution:
  type: "auto"

# Dreamer-V3 metrics
metric:
  aggregator:
    metrics:
      Loss/world_model_loss: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/value_loss: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/policy_loss: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/observation_loss: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/reward_loss: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/state_loss: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Loss/continue_loss: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/kl: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/post_entropy: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      State/prior_entropy: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/world_model: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/actor: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}
      Grads/critic: 
        _target_: torchmetrics.MeanMetric
        sync_on_compute: ${metric.sync_on_compute}