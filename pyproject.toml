[virtualenvs]
create = true
in-project = true

[build-system]
requires = ["setuptools >= 61.0.0"]
build-backend = "setuptools.build_meta"

[project]
name = "sheeprl"
description = "High-quality, single file and distributed implementation of Deep Reinforcement Learning algorithms with production-friendly features"
authors = [
  { name = "Federico Belotti", email = "federico.belotti@orobix.com" },
  { name = "Davide Angioni", email = "davide.angioni@orobix.com" },
  { name = "Refik Can Malli", email = "refikcan.malli@orobix.com" },
  { name = "Michele Milesi", email = "michele.milesi@orobix.com" },
]
maintainers = [
  { name = "Federico Belotti", email = "federico.belotti@orobix.com" },
  { name = "Davide Angioni", email = "davide.angioni@orobix.com" },
  { name = "Refik Can Malli", email = "refikcan.malli@orobix.com" },
  { name = "Michele Milesi", email = "michele.milesi@orobix.com" },
]
keywords = ["reinforcement", "machine", "learning", "distributed", "production"]
license = { file = "LICENSE" }
readme = { file = "docs/README.md", content-type = "text/markdown" }
requires-python = ">=3.8,<3.11"
classifiers = ["Programming Language :: Python", "Topic :: Scientific/Engineering :: Artificial Intelligence"]
dependencies = [
  "gymnasium==0.29.*",
  "pygame >=2.1.3",
  "moviepy>=1.0.3",
  "tensorboard>=2.10",
  "python-dotenv>=1.0.0",
  "lightning==2.1.*",
  "lightning-utilities<=0.9",
  "hydra-core==1.3.0",
  "torchmetrics",
  "rich==13.5.*",
  "opencv-python==4.8.0.*",
  "torch>=2.0"
]
dynamic = ["version"]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["sheeprl", "sheeprl.*", "hydra_plugins"]
exclude = ["tests*", "build*", "dist*", "notebooks*"]

[tool.setuptools.dynamic]
version = {attr = "sheeprl.__init__.__version__"}
readme = {file = ["docs/README.md"], content-type = "text/markdown"}

[project.scripts]
sheeprl = "sheeprl.cli:run"

[project.urls]
homepage = "https://eclecticsheep.ai"
repository = "https://github.com/Eclectic-Sheep/sheeprl"

[project.optional-dependencies]
test = ["pytest==7.3.1", "pytest-timeout==2.1.0", "pytest-coverage"]
dev = [
  "pre-commit==2.20.0",
  "mypy==1.2.0",
  "black==23.3.0",
  "isort==5.12.0",
  "autoflake==2.1.1",
  "ruff==0.0.284",
]
mujoco = ["mujoco>=2.3.3", "gymnasium[mujoco]==0.29.*"]
dmc = ["dm_control>=1.0.12"]
box2d = ["gymnasium[box2d]==0.29.*"]
atari = [
  "gymnasium[atari]==0.29.*",
  "gymnasium[accept-rom-license]==0.29.*",
  "gymnasium[other]==0.29.*",
]
minedojo = ["minedojo==0.1", "importlib_resources==5.12.0"]
minerl = ["setuptools==66.0.0", "minerl==0.4.4"]
diambra = ["diambra==0.0.16", "diambra-arena==2.2.2"]
crafter = ["crafter==1.8.1"]
mlflow = ["mlflow==2.8.0"]

[tool.ruff]
line-length = 120
# Enable Pyflakes `E` and `F` codes by default.
select = [
  "E",
  "W", # see: https://pypi.org/project/pycodestyle
  "F", # see: https://pypi.org/project/pyflakes
]
ignore = [
  "E731", # Do not assign a lambda expression, use a def
  "E402", # Module level import not at top of file
]
# Exclude a variety of commonly ignored directories.
exclude = [".git", "docs", "_notebooks", "examples"]
ignore-init-module-imports = true

# Black formatting
[tool.black]
line_length = 120
include = '\.pyi?$'
exclude = '''
/(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
  )/
'''

# iSort
[tool.isort]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
multi_line_output = 3
include_trailing_comma = true
skip_gitignore = true

# Pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = "--strict-markers --disable-pytest-warnings"
markers = ["benchmark: mark test as a benchmark"]

# Pytest coverage
[tool.coverage.run]
omit = ["./sheeprl/envs/*", "./sheeprl/available_agents.py", "sheeprl/utils/mlflow.py"]

[tool.prettier]
tab_width = 2

[tool.interrogate]
ignore_init_method = true
ignore_init_module = false
ignore_magic = false
ignore_semiprivate = false
ignore_private = false
ignore_module = true
ignore_property_decorators = false
fail_under = 95
verbose = 2
omit_covered_files = false
quiet = false
whitelist_regex = []
color = true
exclude = ["notebooks"]
ignore_regex = ["^get$", "^mock_.*", ".*BaseClass.*"]

[tool.mypy]
# -> Level 1# custom settings
show_error_codes = true
ignore_missing_imports = true
plugins = "numpy.typing.mypy_plugin"
# suggested settings# # https://mypy.readthedocs.io/en/stable/existing_code.html?highlight=no_implicit_optional#introduce-stricter-options
# Start off with these
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
no_implicit_optional = true
# this is for reusing same variable with different types
allow_redefinition = true

# -> Level 2# Getting these passing should be easy
strict_equality = true
strict_concatenate = true
# Strongly recommend enabling this one as soon as you can
check_untyped_defs = true

# -> Level 3# These shouldn't be too much additional work, but may be tricky to get passing if you use a lot of untyped libraries
disallow_subclassing_any = false
disallow_untyped_decorators = false
disallow_any_generics = false
disallow_any_unimported = false
# These next few are various gradations of forcing use of type annotationsdisallow_untyped_calls = false
disallow_incomplete_defs = false
disallow_untyped_defs = false

# -> Level 4# This one isn't too hard to get passing, but return on investment is lower
no_implicit_reexport = false
# This one can be tricky to get passing if you use a lot of untyped libraries
warn_return_any = false


[tool.bumpver]
current_version = "0.5.0"
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"
commit_message = "bump version {old_version} -> {new_version}"
tag_message = "v{new_version}"
tag_scope = "default"
pre_commit_hook = ""
post_commit_hook = ""
commit = true
tag = true
push = true

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
]
"sheeprl/__init__.py" = [
    '^__version__ = "{version}"$',
]

